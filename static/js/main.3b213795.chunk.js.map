{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","data","useState","movie","setMovie","search","setSearch","url","getMovie","a","fetch","response","json","console","error","useEffect","type","value","onChange","e","target","onClick","Response","src","Poster","alt","Title","Year","Writer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAwDeA,MArDf,WAAgB,IA0BSC,EA1BV,EACeC,mBAAS,IADxB,mBACJC,EADI,KACGC,EADH,OAEiBF,mBAAS,IAF1B,mBAEJG,EAFI,KAEIC,EAFJ,KAKLC,EAAG,oCAAgCF,EAAhC,mBADO,YAGVG,EAAQ,uCAAG,8BAAAC,EAAA,+EAEUC,MAAMH,GAFhB,cAEPI,EAFO,gBAGOA,EAASC,OAHhB,OAGNX,EAHM,OAIZG,EAASH,GAJG,kDAMXY,QAAQC,MAAR,MANW,0DAAH,qDAoCf,OAtBCC,qBAAU,WACRP,MACC,IAqBD,gCACG,uBAAOQ,KAAK,OAAOC,MAAOZ,EAAQa,SA5BjB,SAAAC,GACpBb,EAAUa,EAAEC,OAAOH,UA4BhB,wBAAQD,KAAK,SAASK,QAASb,EAA/B,oBACA,wBArBgBP,EAsBDE,EArBA,SAAhBF,EAAKqB,SAEJ,gCACG,qBAAKC,IAAKtB,EAAKuB,OAAQC,IAAI,KAC3B,yCAAYxB,EAAKyB,SACjB,uCAAUzB,EAAK0B,QACf,yCAAY1B,EAAK2B,UACjB,4BAAI3B,EAAKqB,cAKb,oDC9BOO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3b213795.chunk.js","sourcesContent":["import './App.css';\nimport React, {useEffect, useState} from 'react';\n\nfunction App() {\n    const [movie, setMovie] = useState({});\n    const [search, setSearch] = useState('');\n    \n    const API_KEY = \"745d0d4e\";\n    const url = `http://www.omdbapi.com/?t=${search}&apikey=${API_KEY}`;\n    \n    const getMovie = async()=>{\n      try {\n        const response = await fetch(url);\n         const data = await response.json()\n         setMovie(data);\n      } catch (error) {\n          console.error(error);\n      } \n    }\n\n    const onInputChange = e =>{\n      setSearch(e.target.value);\n    }\n\n    useEffect(()=> {\n      getMovie();\n    }, []);\n\n\n  function checkResponse(data){\n     if(data.Response===\"True\"){\n       return(\n         <div>\n            <img src={data.Poster} alt=\"\"/>\n            <h4>Title: {data.Title}</h4>\n            <p>Year: {data.Year}</p>\n            <p>Writer: {data.Writer}</p>\n            <p>{data.Response}</p>\n         </div>\n       );\n    }\n      return (\n        <p>No Movie found</p>\n      );\n    }\n\n   return(\n      <div>\n         <input type=\"text\" value={search} onChange={onInputChange}/>\n         <button type=\"submit\" onClick={getMovie}>Search</button>\n         <br></br>   \n         {checkResponse(movie)}\n      </div>\n   );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}